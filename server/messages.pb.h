// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace exchange {
class Client;
class ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class Client_Transaction;
class Client_TransactionDefaultTypeInternal;
extern Client_TransactionDefaultTypeInternal _Client_Transaction_default_instance_;
class PriceAndSize;
class PriceAndSizeDefaultTypeInternal;
extern PriceAndSizeDefaultTypeInternal _PriceAndSize_default_instance_;
class Server;
class ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
class Server_Position;
class Server_PositionDefaultTypeInternal;
extern Server_PositionDefaultTypeInternal _Server_Position_default_instance_;
}  // namespace exchange
PROTOBUF_NAMESPACE_OPEN
template<> ::exchange::Client* Arena::CreateMaybeMessage<::exchange::Client>(Arena*);
template<> ::exchange::Client_Transaction* Arena::CreateMaybeMessage<::exchange::Client_Transaction>(Arena*);
template<> ::exchange::PriceAndSize* Arena::CreateMaybeMessage<::exchange::PriceAndSize>(Arena*);
template<> ::exchange::Server* Arena::CreateMaybeMessage<::exchange::Server>(Arena*);
template<> ::exchange::Server_Position* Arena::CreateMaybeMessage<::exchange::Server_Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace exchange {

enum Server_MessageType : int {
  Server_MessageType_HELLO = 1,
  Server_MessageType_BOOK = 2,
  Server_MessageType_FILL = 3,
  Server_MessageType_REJECTED = 4
};
bool Server_MessageType_IsValid(int value);
constexpr Server_MessageType Server_MessageType_MessageType_MIN = Server_MessageType_HELLO;
constexpr Server_MessageType Server_MessageType_MessageType_MAX = Server_MessageType_REJECTED;
constexpr int Server_MessageType_MessageType_ARRAYSIZE = Server_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Server_MessageType_descriptor();
template<typename T>
inline const std::string& Server_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Server_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Server_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Server_MessageType_descriptor(), enum_t_value);
}
inline bool Server_MessageType_Parse(
    const std::string& name, Server_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Server_MessageType>(
    Server_MessageType_descriptor(), name, value);
}
enum Client_MessageType : int {
  Client_MessageType_HELLO = 1,
  Client_MessageType_ADD_ORDER = 2
};
bool Client_MessageType_IsValid(int value);
constexpr Client_MessageType Client_MessageType_MessageType_MIN = Client_MessageType_HELLO;
constexpr Client_MessageType Client_MessageType_MessageType_MAX = Client_MessageType_ADD_ORDER;
constexpr int Client_MessageType_MessageType_ARRAYSIZE = Client_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Client_MessageType_descriptor();
template<typename T>
inline const std::string& Client_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Client_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Client_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Client_MessageType_descriptor(), enum_t_value);
}
inline bool Client_MessageType_Parse(
    const std::string& name, Client_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Client_MessageType>(
    Client_MessageType_descriptor(), name, value);
}
enum StockType : int {
  BOND = 1,
  VALBS = 2,
  VALE = 3
};
bool StockType_IsValid(int value);
constexpr StockType StockType_MIN = BOND;
constexpr StockType StockType_MAX = VALE;
constexpr int StockType_ARRAYSIZE = StockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StockType_descriptor();
template<typename T>
inline const std::string& StockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StockType_descriptor(), enum_t_value);
}
inline bool StockType_Parse(
    const std::string& name, StockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StockType>(
    StockType_descriptor(), name, value);
}
enum Dir : int {
  BUY = 1,
  SELL = 2
};
bool Dir_IsValid(int value);
constexpr Dir Dir_MIN = BUY;
constexpr Dir Dir_MAX = SELL;
constexpr int Dir_ARRAYSIZE = Dir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dir_descriptor();
template<typename T>
inline const std::string& Dir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dir_descriptor(), enum_t_value);
}
inline bool Dir_Parse(
    const std::string& name, Dir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dir>(
    Dir_descriptor(), name, value);
}
// ===================================================================

class PriceAndSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.PriceAndSize) */ {
 public:
  PriceAndSize();
  virtual ~PriceAndSize();

  PriceAndSize(const PriceAndSize& from);
  PriceAndSize(PriceAndSize&& from) noexcept
    : PriceAndSize() {
    *this = ::std::move(from);
  }

  inline PriceAndSize& operator=(const PriceAndSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceAndSize& operator=(PriceAndSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceAndSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceAndSize* internal_default_instance() {
    return reinterpret_cast<const PriceAndSize*>(
               &_PriceAndSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceAndSize& a, PriceAndSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceAndSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceAndSize* New() const final {
    return CreateMaybeMessage<PriceAndSize>(nullptr);
  }

  PriceAndSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceAndSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceAndSize& from);
  void MergeFrom(const PriceAndSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceAndSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.PriceAndSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required int32 price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:exchange.PriceAndSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Server_Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.Server.Position) */ {
 public:
  Server_Position();
  virtual ~Server_Position();

  Server_Position(const Server_Position& from);
  Server_Position(Server_Position&& from) noexcept
    : Server_Position() {
    *this = ::std::move(from);
  }

  inline Server_Position& operator=(const Server_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_Position& operator=(Server_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_Position* internal_default_instance() {
    return reinterpret_cast<const Server_Position*>(
               &_Server_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Server_Position& a, Server_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_Position* New() const final {
    return CreateMaybeMessage<Server_Position>(nullptr);
  }

  Server_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_Position& from);
  void MergeFrom(const Server_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.Server.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kSymbolFieldNumber = 1,
  };
  // repeated .exchange.PriceAndSize buy = 2;
  int buy_size() const;
  void clear_buy();
  ::exchange::PriceAndSize* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
      mutable_buy();
  const ::exchange::PriceAndSize& buy(int index) const;
  ::exchange::PriceAndSize* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
      buy() const;

  // repeated .exchange.PriceAndSize sell = 3;
  int sell_size() const;
  void clear_sell();
  ::exchange::PriceAndSize* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
      mutable_sell();
  const ::exchange::PriceAndSize& sell(int index) const;
  ::exchange::PriceAndSize* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
      sell() const;

  // required .exchange.StockType symbol = 1;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  ::exchange::StockType symbol() const;
  void set_symbol(::exchange::StockType value);

  // @@protoc_insertion_point(class_scope:exchange.Server.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize > sell_;
  int symbol_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Server :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.Server) */ {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return CreateMaybeMessage<Server>(nullptr);
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.Server";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Server_Position Position;

  typedef Server_MessageType MessageType;
  static constexpr MessageType HELLO =
    Server_MessageType_HELLO;
  static constexpr MessageType BOOK =
    Server_MessageType_BOOK;
  static constexpr MessageType FILL =
    Server_MessageType_FILL;
  static constexpr MessageType REJECTED =
    Server_MessageType_REJECTED;
  static inline bool MessageType_IsValid(int value) {
    return Server_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Server_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Server_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Server_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Server_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Server_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Server_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBookFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // optional .exchange.Server.Position book = 2;
  bool has_book() const;
  private:
  bool _internal_has_book() const;
  public:
  void clear_book();
  const ::exchange::Server_Position& book() const;
  ::exchange::Server_Position* release_book();
  ::exchange::Server_Position* mutable_book();
  void set_allocated_book(::exchange::Server_Position* book);

  // required .exchange.Server.MessageType t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  ::exchange::Server_MessageType t() const;
  void set_t(::exchange::Server_MessageType value);

  // @@protoc_insertion_point(class_scope:exchange.Server)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::exchange::Server_Position* book_;
  int t_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Client_Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.Client.Transaction) */ {
 public:
  Client_Transaction();
  virtual ~Client_Transaction();

  Client_Transaction(const Client_Transaction& from);
  Client_Transaction(Client_Transaction&& from) noexcept
    : Client_Transaction() {
    *this = ::std::move(from);
  }

  inline Client_Transaction& operator=(const Client_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_Transaction& operator=(Client_Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_Transaction* internal_default_instance() {
    return reinterpret_cast<const Client_Transaction*>(
               &_Client_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Client_Transaction& a, Client_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_Transaction* New() const final {
    return CreateMaybeMessage<Client_Transaction>(nullptr);
  }

  Client_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_Transaction& from);
  void MergeFrom(const Client_Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.Client.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSymbolFieldNumber = 1,
    kDirFieldNumber = 4,
  };
  // required int32 price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .exchange.StockType symbol = 1;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  ::exchange::StockType symbol() const;
  void set_symbol(::exchange::StockType value);

  // required .exchange.Dir dir = 4;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  ::exchange::Dir dir() const;
  void set_dir(::exchange::Dir value);

  // @@protoc_insertion_point(class_scope:exchange.Client.Transaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  int symbol_;
  int dir_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Client :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.Client) */ {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(nullptr);
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.Client";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Client_Transaction Transaction;

  typedef Client_MessageType MessageType;
  static constexpr MessageType HELLO =
    Client_MessageType_HELLO;
  static constexpr MessageType ADD_ORDER =
    Client_MessageType_ADD_ORDER;
  static inline bool MessageType_IsValid(int value) {
    return Client_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Client_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Client_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Client_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Client_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Client_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Client_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddOrderFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // optional .exchange.Client.Transaction add_order = 2;
  bool has_add_order() const;
  private:
  bool _internal_has_add_order() const;
  public:
  void clear_add_order();
  const ::exchange::Client_Transaction& add_order() const;
  ::exchange::Client_Transaction* release_add_order();
  ::exchange::Client_Transaction* mutable_add_order();
  void set_allocated_add_order(::exchange::Client_Transaction* add_order);

  // required .exchange.Client.MessageType t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  ::exchange::Client_MessageType t() const;
  void set_t(::exchange::Client_MessageType value);

  // @@protoc_insertion_point(class_scope:exchange.Client)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::exchange::Client_Transaction* add_order_;
  int t_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceAndSize

// required int32 price = 1;
inline bool PriceAndSize::_internal_has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool PriceAndSize::has_price() const {
  return _internal_has_price();
}
inline void PriceAndSize::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceAndSize::price() const {
  // @@protoc_insertion_point(field_get:exchange.PriceAndSize.price)
  return price_;
}
inline void PriceAndSize::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
  // @@protoc_insertion_point(field_set:exchange.PriceAndSize.price)
}

// required int32 size = 2;
inline bool PriceAndSize::_internal_has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool PriceAndSize::has_size() const {
  return _internal_has_size();
}
inline void PriceAndSize::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceAndSize::size() const {
  // @@protoc_insertion_point(field_get:exchange.PriceAndSize.size)
  return size_;
}
inline void PriceAndSize::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:exchange.PriceAndSize.size)
}

// -------------------------------------------------------------------

// Server_Position

// required .exchange.StockType symbol = 1;
inline bool Server_Position::_internal_has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Server_Position::has_symbol() const {
  return _internal_has_symbol();
}
inline void Server_Position::clear_symbol() {
  symbol_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::exchange::StockType Server_Position::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.Server.Position.symbol)
  return static_cast< ::exchange::StockType >(symbol_);
}
inline void Server_Position::set_symbol(::exchange::StockType value) {
  assert(::exchange::StockType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  symbol_ = value;
  // @@protoc_insertion_point(field_set:exchange.Server.Position.symbol)
}

// repeated .exchange.PriceAndSize buy = 2;
inline int Server_Position::buy_size() const {
  return buy_.size();
}
inline void Server_Position::clear_buy() {
  buy_.Clear();
}
inline ::exchange::PriceAndSize* Server_Position::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:exchange.Server.Position.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
Server_Position::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:exchange.Server.Position.buy)
  return &buy_;
}
inline const ::exchange::PriceAndSize& Server_Position::buy(int index) const {
  // @@protoc_insertion_point(field_get:exchange.Server.Position.buy)
  return buy_.Get(index);
}
inline ::exchange::PriceAndSize* Server_Position::add_buy() {
  // @@protoc_insertion_point(field_add:exchange.Server.Position.buy)
  return buy_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
Server_Position::buy() const {
  // @@protoc_insertion_point(field_list:exchange.Server.Position.buy)
  return buy_;
}

// repeated .exchange.PriceAndSize sell = 3;
inline int Server_Position::sell_size() const {
  return sell_.size();
}
inline void Server_Position::clear_sell() {
  sell_.Clear();
}
inline ::exchange::PriceAndSize* Server_Position::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:exchange.Server.Position.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
Server_Position::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:exchange.Server.Position.sell)
  return &sell_;
}
inline const ::exchange::PriceAndSize& Server_Position::sell(int index) const {
  // @@protoc_insertion_point(field_get:exchange.Server.Position.sell)
  return sell_.Get(index);
}
inline ::exchange::PriceAndSize* Server_Position::add_sell() {
  // @@protoc_insertion_point(field_add:exchange.Server.Position.sell)
  return sell_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
Server_Position::sell() const {
  // @@protoc_insertion_point(field_list:exchange.Server.Position.sell)
  return sell_;
}

// -------------------------------------------------------------------

// Server

// required .exchange.Server.MessageType t = 1;
inline bool Server::_internal_has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool Server::has_t() const {
  return _internal_has_t();
}
inline void Server::clear_t() {
  t_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::exchange::Server_MessageType Server::t() const {
  // @@protoc_insertion_point(field_get:exchange.Server.t)
  return static_cast< ::exchange::Server_MessageType >(t_);
}
inline void Server::set_t(::exchange::Server_MessageType value) {
  assert(::exchange::Server_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  t_ = value;
  // @@protoc_insertion_point(field_set:exchange.Server.t)
}

// optional .exchange.Server.Position book = 2;
inline bool Server::_internal_has_book() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Server::has_book() const {
  return _internal_has_book();
}
inline void Server::clear_book() {
  if (book_ != nullptr) book_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::exchange::Server_Position& Server::book() const {
  const ::exchange::Server_Position* p = book_;
  // @@protoc_insertion_point(field_get:exchange.Server.book)
  return p != nullptr ? *p : *reinterpret_cast<const ::exchange::Server_Position*>(
      &::exchange::_Server_Position_default_instance_);
}
inline ::exchange::Server_Position* Server::release_book() {
  // @@protoc_insertion_point(field_release:exchange.Server.book)
  _has_bits_[0] &= ~0x00000001u;
  ::exchange::Server_Position* temp = book_;
  book_ = nullptr;
  return temp;
}
inline ::exchange::Server_Position* Server::mutable_book() {
  _has_bits_[0] |= 0x00000001u;
  if (book_ == nullptr) {
    auto* p = CreateMaybeMessage<::exchange::Server_Position>(GetArenaNoVirtual());
    book_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exchange.Server.book)
  return book_;
}
inline void Server::set_allocated_book(::exchange::Server_Position* book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete book_;
  }
  if (book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, book, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  book_ = book;
  // @@protoc_insertion_point(field_set_allocated:exchange.Server.book)
}

// -------------------------------------------------------------------

// Client_Transaction

// required .exchange.StockType symbol = 1;
inline bool Client_Transaction::_internal_has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline bool Client_Transaction::has_symbol() const {
  return _internal_has_symbol();
}
inline void Client_Transaction::clear_symbol() {
  symbol_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::exchange::StockType Client_Transaction::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.Client.Transaction.symbol)
  return static_cast< ::exchange::StockType >(symbol_);
}
inline void Client_Transaction::set_symbol(::exchange::StockType value) {
  assert(::exchange::StockType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  symbol_ = value;
  // @@protoc_insertion_point(field_set:exchange.Client.Transaction.symbol)
}

// required int32 price = 2;
inline bool Client_Transaction::_internal_has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Client_Transaction::has_price() const {
  return _internal_has_price();
}
inline void Client_Transaction::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_Transaction::price() const {
  // @@protoc_insertion_point(field_get:exchange.Client.Transaction.price)
  return price_;
}
inline void Client_Transaction::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
  // @@protoc_insertion_point(field_set:exchange.Client.Transaction.price)
}

// required int32 size = 3;
inline bool Client_Transaction::_internal_has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool Client_Transaction::has_size() const {
  return _internal_has_size();
}
inline void Client_Transaction::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_Transaction::size() const {
  // @@protoc_insertion_point(field_get:exchange.Client.Transaction.size)
  return size_;
}
inline void Client_Transaction::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:exchange.Client.Transaction.size)
}

// required .exchange.Dir dir = 4;
inline bool Client_Transaction::_internal_has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline bool Client_Transaction::has_dir() const {
  return _internal_has_dir();
}
inline void Client_Transaction::clear_dir() {
  dir_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::exchange::Dir Client_Transaction::dir() const {
  // @@protoc_insertion_point(field_get:exchange.Client.Transaction.dir)
  return static_cast< ::exchange::Dir >(dir_);
}
inline void Client_Transaction::set_dir(::exchange::Dir value) {
  assert(::exchange::Dir_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:exchange.Client.Transaction.dir)
}

// -------------------------------------------------------------------

// Client

// required .exchange.Client.MessageType t = 1;
inline bool Client::_internal_has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool Client::has_t() const {
  return _internal_has_t();
}
inline void Client::clear_t() {
  t_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::exchange::Client_MessageType Client::t() const {
  // @@protoc_insertion_point(field_get:exchange.Client.t)
  return static_cast< ::exchange::Client_MessageType >(t_);
}
inline void Client::set_t(::exchange::Client_MessageType value) {
  assert(::exchange::Client_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  t_ = value;
  // @@protoc_insertion_point(field_set:exchange.Client.t)
}

// optional .exchange.Client.Transaction add_order = 2;
inline bool Client::_internal_has_add_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Client::has_add_order() const {
  return _internal_has_add_order();
}
inline void Client::clear_add_order() {
  if (add_order_ != nullptr) add_order_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::exchange::Client_Transaction& Client::add_order() const {
  const ::exchange::Client_Transaction* p = add_order_;
  // @@protoc_insertion_point(field_get:exchange.Client.add_order)
  return p != nullptr ? *p : *reinterpret_cast<const ::exchange::Client_Transaction*>(
      &::exchange::_Client_Transaction_default_instance_);
}
inline ::exchange::Client_Transaction* Client::release_add_order() {
  // @@protoc_insertion_point(field_release:exchange.Client.add_order)
  _has_bits_[0] &= ~0x00000001u;
  ::exchange::Client_Transaction* temp = add_order_;
  add_order_ = nullptr;
  return temp;
}
inline ::exchange::Client_Transaction* Client::mutable_add_order() {
  _has_bits_[0] |= 0x00000001u;
  if (add_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::exchange::Client_Transaction>(GetArenaNoVirtual());
    add_order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exchange.Client.add_order)
  return add_order_;
}
inline void Client::set_allocated_add_order(::exchange::Client_Transaction* add_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete add_order_;
  }
  if (add_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  add_order_ = add_order;
  // @@protoc_insertion_point(field_set_allocated:exchange.Client.add_order)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::exchange::Server_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::Server_MessageType>() {
  return ::exchange::Server_MessageType_descriptor();
}
template <> struct is_proto_enum< ::exchange::Client_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::Client_MessageType>() {
  return ::exchange::Client_MessageType_descriptor();
}
template <> struct is_proto_enum< ::exchange::StockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::StockType>() {
  return ::exchange::StockType_descriptor();
}
template <> struct is_proto_enum< ::exchange::Dir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::Dir>() {
  return ::exchange::Dir_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
