// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace exchange {
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ClientMessage_Transaction;
class ClientMessage_TransactionDefaultTypeInternal;
extern ClientMessage_TransactionDefaultTypeInternal _ClientMessage_Transaction_default_instance_;
class PriceAndSize;
class PriceAndSizeDefaultTypeInternal;
extern PriceAndSizeDefaultTypeInternal _PriceAndSize_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class ServerMessage_Position;
class ServerMessage_PositionDefaultTypeInternal;
extern ServerMessage_PositionDefaultTypeInternal _ServerMessage_Position_default_instance_;
}  // namespace exchange
PROTOBUF_NAMESPACE_OPEN
template<> ::exchange::ClientMessage* Arena::CreateMaybeMessage<::exchange::ClientMessage>(Arena*);
template<> ::exchange::ClientMessage_Transaction* Arena::CreateMaybeMessage<::exchange::ClientMessage_Transaction>(Arena*);
template<> ::exchange::PriceAndSize* Arena::CreateMaybeMessage<::exchange::PriceAndSize>(Arena*);
template<> ::exchange::ServerMessage* Arena::CreateMaybeMessage<::exchange::ServerMessage>(Arena*);
template<> ::exchange::ServerMessage_Position* Arena::CreateMaybeMessage<::exchange::ServerMessage_Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace exchange {

enum ServerMessage_MessageType : int {
  ServerMessage_MessageType_HELLO = 0,
  ServerMessage_MessageType_BOOK = 1,
  ServerMessage_MessageType_FILL = 2,
  ServerMessage_MessageType_REJECTED = 3,
  ServerMessage_MessageType_ServerMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerMessage_MessageType_ServerMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerMessage_MessageType_IsValid(int value);
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MIN = ServerMessage_MessageType_HELLO;
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MAX = ServerMessage_MessageType_REJECTED;
constexpr int ServerMessage_MessageType_MessageType_ARRAYSIZE = ServerMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ServerMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ServerMessage_MessageType_Parse(
    const std::string& name, ServerMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_MessageType>(
    ServerMessage_MessageType_descriptor(), name, value);
}
enum ClientMessage_MessageType : int {
  ClientMessage_MessageType_HELLO = 0,
  ClientMessage_MessageType_ADD_ORDER = 1,
  ClientMessage_MessageType_ClientMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMessage_MessageType_ClientMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMessage_MessageType_IsValid(int value);
constexpr ClientMessage_MessageType ClientMessage_MessageType_MessageType_MIN = ClientMessage_MessageType_HELLO;
constexpr ClientMessage_MessageType ClientMessage_MessageType_MessageType_MAX = ClientMessage_MessageType_ADD_ORDER;
constexpr int ClientMessage_MessageType_MessageType_ARRAYSIZE = ClientMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ClientMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ClientMessage_MessageType_Parse(
    const std::string& name, ClientMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_MessageType>(
    ClientMessage_MessageType_descriptor(), name, value);
}
enum StockType : int {
  BOND = 0,
  VALBZ = 1,
  VALE = 2,
  StockType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StockType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StockType_IsValid(int value);
constexpr StockType StockType_MIN = BOND;
constexpr StockType StockType_MAX = VALE;
constexpr int StockType_ARRAYSIZE = StockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StockType_descriptor();
template<typename T>
inline const std::string& StockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StockType_descriptor(), enum_t_value);
}
inline bool StockType_Parse(
    const std::string& name, StockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StockType>(
    StockType_descriptor(), name, value);
}
enum Dir : int {
  BUY = 0,
  SELL = 1,
  Dir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Dir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Dir_IsValid(int value);
constexpr Dir Dir_MIN = BUY;
constexpr Dir Dir_MAX = SELL;
constexpr int Dir_ARRAYSIZE = Dir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dir_descriptor();
template<typename T>
inline const std::string& Dir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dir_descriptor(), enum_t_value);
}
inline bool Dir_Parse(
    const std::string& name, Dir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dir>(
    Dir_descriptor(), name, value);
}
// ===================================================================

class PriceAndSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.PriceAndSize) */ {
 public:
  PriceAndSize();
  virtual ~PriceAndSize();

  PriceAndSize(const PriceAndSize& from);
  PriceAndSize(PriceAndSize&& from) noexcept
    : PriceAndSize() {
    *this = ::std::move(from);
  }

  inline PriceAndSize& operator=(const PriceAndSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceAndSize& operator=(PriceAndSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceAndSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceAndSize* internal_default_instance() {
    return reinterpret_cast<const PriceAndSize*>(
               &_PriceAndSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceAndSize& a, PriceAndSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceAndSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceAndSize* New() const final {
    return CreateMaybeMessage<PriceAndSize>(nullptr);
  }

  PriceAndSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceAndSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceAndSize& from);
  void MergeFrom(const PriceAndSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceAndSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.PriceAndSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int32 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:exchange.PriceAndSize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.ServerMessage.Position) */ {
 public:
  ServerMessage_Position();
  virtual ~ServerMessage_Position();

  ServerMessage_Position(const ServerMessage_Position& from);
  ServerMessage_Position(ServerMessage_Position&& from) noexcept
    : ServerMessage_Position() {
    *this = ::std::move(from);
  }

  inline ServerMessage_Position& operator=(const ServerMessage_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_Position& operator=(ServerMessage_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage_Position* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_Position*>(
               &_ServerMessage_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerMessage_Position& a, ServerMessage_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_Position* New() const final {
    return CreateMaybeMessage<ServerMessage_Position>(nullptr);
  }

  ServerMessage_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_Position& from);
  void MergeFrom(const ServerMessage_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.ServerMessage.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kSymbolFieldNumber = 1,
  };
  // repeated .exchange.PriceAndSize buy = 2;
  int buy_size() const;
  void clear_buy();
  ::exchange::PriceAndSize* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
      mutable_buy();
  const ::exchange::PriceAndSize& buy(int index) const;
  ::exchange::PriceAndSize* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
      buy() const;

  // repeated .exchange.PriceAndSize sell = 3;
  int sell_size() const;
  void clear_sell();
  ::exchange::PriceAndSize* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
      mutable_sell();
  const ::exchange::PriceAndSize& sell(int index) const;
  ::exchange::PriceAndSize* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
      sell() const;

  // .exchange.StockType symbol = 1;
  void clear_symbol();
  ::exchange::StockType symbol() const;
  void set_symbol(::exchange::StockType value);

  // @@protoc_insertion_point(class_scope:exchange.ServerMessage.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize > sell_;
  int symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerMessage_Position Position;

  typedef ServerMessage_MessageType MessageType;
  static constexpr MessageType HELLO =
    ServerMessage_MessageType_HELLO;
  static constexpr MessageType BOOK =
    ServerMessage_MessageType_BOOK;
  static constexpr MessageType FILL =
    ServerMessage_MessageType_FILL;
  static constexpr MessageType REJECTED =
    ServerMessage_MessageType_REJECTED;
  static inline bool MessageType_IsValid(int value) {
    return ServerMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ServerMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ServerMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ServerMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ServerMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ServerMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ServerMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBookFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // .exchange.ServerMessage.Position book = 2;
  bool has_book() const;
  private:
  bool _internal_has_book() const;
  public:
  void clear_book();
  const ::exchange::ServerMessage_Position& book() const;
  ::exchange::ServerMessage_Position* release_book();
  ::exchange::ServerMessage_Position* mutable_book();
  void set_allocated_book(::exchange::ServerMessage_Position* book);

  // .exchange.ServerMessage.MessageType t = 1;
  void clear_t();
  ::exchange::ServerMessage_MessageType t() const;
  void set_t(::exchange::ServerMessage_MessageType value);

  // @@protoc_insertion_point(class_scope:exchange.ServerMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::exchange::ServerMessage_Position* book_;
  int t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.ClientMessage.Transaction) */ {
 public:
  ClientMessage_Transaction();
  virtual ~ClientMessage_Transaction();

  ClientMessage_Transaction(const ClientMessage_Transaction& from);
  ClientMessage_Transaction(ClientMessage_Transaction&& from) noexcept
    : ClientMessage_Transaction() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Transaction& operator=(const ClientMessage_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Transaction& operator=(ClientMessage_Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Transaction* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Transaction*>(
               &_ClientMessage_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientMessage_Transaction& a, ClientMessage_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Transaction* New() const final {
    return CreateMaybeMessage<ClientMessage_Transaction>(nullptr);
  }

  ClientMessage_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Transaction& from);
  void MergeFrom(const ClientMessage_Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.ClientMessage.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kPriceFieldNumber = 2,
    kSizeFieldNumber = 3,
    kDirFieldNumber = 4,
  };
  // .exchange.StockType symbol = 1;
  void clear_symbol();
  ::exchange::StockType symbol() const;
  void set_symbol(::exchange::StockType value);

  // int32 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .exchange.Dir dir = 4;
  void clear_dir();
  ::exchange::Dir dir() const;
  void set_dir(::exchange::Dir value);

  // @@protoc_insertion_point(class_scope:exchange.ClientMessage.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  int dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Transaction Transaction;

  typedef ClientMessage_MessageType MessageType;
  static constexpr MessageType HELLO =
    ClientMessage_MessageType_HELLO;
  static constexpr MessageType ADD_ORDER =
    ClientMessage_MessageType_ADD_ORDER;
  static inline bool MessageType_IsValid(int value) {
    return ClientMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ClientMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ClientMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ClientMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ClientMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ClientMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ClientMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAddOrderFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .exchange.ClientMessage.Transaction add_order = 2;
  bool has_add_order() const;
  private:
  bool _internal_has_add_order() const;
  public:
  void clear_add_order();
  const ::exchange::ClientMessage_Transaction& add_order() const;
  ::exchange::ClientMessage_Transaction* release_add_order();
  ::exchange::ClientMessage_Transaction* mutable_add_order();
  void set_allocated_add_order(::exchange::ClientMessage_Transaction* add_order);

  // .exchange.ClientMessage.MessageType t = 1;
  void clear_t();
  ::exchange::ClientMessage_MessageType t() const;
  void set_t(::exchange::ClientMessage_MessageType value);

  // @@protoc_insertion_point(class_scope:exchange.ClientMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::exchange::ClientMessage_Transaction* add_order_;
  int t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceAndSize

// int32 price = 1;
inline void PriceAndSize::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceAndSize::price() const {
  // @@protoc_insertion_point(field_get:exchange.PriceAndSize.price)
  return price_;
}
inline void PriceAndSize::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:exchange.PriceAndSize.price)
}

// int32 size = 2;
inline void PriceAndSize::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceAndSize::size() const {
  // @@protoc_insertion_point(field_get:exchange.PriceAndSize.size)
  return size_;
}
inline void PriceAndSize::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:exchange.PriceAndSize.size)
}

// -------------------------------------------------------------------

// ServerMessage_Position

// .exchange.StockType symbol = 1;
inline void ServerMessage_Position::clear_symbol() {
  symbol_ = 0;
}
inline ::exchange::StockType ServerMessage_Position::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.ServerMessage.Position.symbol)
  return static_cast< ::exchange::StockType >(symbol_);
}
inline void ServerMessage_Position::set_symbol(::exchange::StockType value) {
  
  symbol_ = value;
  // @@protoc_insertion_point(field_set:exchange.ServerMessage.Position.symbol)
}

// repeated .exchange.PriceAndSize buy = 2;
inline int ServerMessage_Position::buy_size() const {
  return buy_.size();
}
inline void ServerMessage_Position::clear_buy() {
  buy_.Clear();
}
inline ::exchange::PriceAndSize* ServerMessage_Position::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:exchange.ServerMessage.Position.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
ServerMessage_Position::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:exchange.ServerMessage.Position.buy)
  return &buy_;
}
inline const ::exchange::PriceAndSize& ServerMessage_Position::buy(int index) const {
  // @@protoc_insertion_point(field_get:exchange.ServerMessage.Position.buy)
  return buy_.Get(index);
}
inline ::exchange::PriceAndSize* ServerMessage_Position::add_buy() {
  // @@protoc_insertion_point(field_add:exchange.ServerMessage.Position.buy)
  return buy_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
ServerMessage_Position::buy() const {
  // @@protoc_insertion_point(field_list:exchange.ServerMessage.Position.buy)
  return buy_;
}

// repeated .exchange.PriceAndSize sell = 3;
inline int ServerMessage_Position::sell_size() const {
  return sell_.size();
}
inline void ServerMessage_Position::clear_sell() {
  sell_.Clear();
}
inline ::exchange::PriceAndSize* ServerMessage_Position::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:exchange.ServerMessage.Position.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >*
ServerMessage_Position::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:exchange.ServerMessage.Position.sell)
  return &sell_;
}
inline const ::exchange::PriceAndSize& ServerMessage_Position::sell(int index) const {
  // @@protoc_insertion_point(field_get:exchange.ServerMessage.Position.sell)
  return sell_.Get(index);
}
inline ::exchange::PriceAndSize* ServerMessage_Position::add_sell() {
  // @@protoc_insertion_point(field_add:exchange.ServerMessage.Position.sell)
  return sell_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::exchange::PriceAndSize >&
ServerMessage_Position::sell() const {
  // @@protoc_insertion_point(field_list:exchange.ServerMessage.Position.sell)
  return sell_;
}

// -------------------------------------------------------------------

// ServerMessage

// .exchange.ServerMessage.MessageType t = 1;
inline void ServerMessage::clear_t() {
  t_ = 0;
}
inline ::exchange::ServerMessage_MessageType ServerMessage::t() const {
  // @@protoc_insertion_point(field_get:exchange.ServerMessage.t)
  return static_cast< ::exchange::ServerMessage_MessageType >(t_);
}
inline void ServerMessage::set_t(::exchange::ServerMessage_MessageType value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:exchange.ServerMessage.t)
}

// .exchange.ServerMessage.Position book = 2;
inline bool ServerMessage::has_book() const {
  return this != internal_default_instance() && book_ != nullptr;
}
inline void ServerMessage::clear_book() {
  if (GetArenaNoVirtual() == nullptr && book_ != nullptr) {
    delete book_;
  }
  book_ = nullptr;
}
inline const ::exchange::ServerMessage_Position& ServerMessage::book() const {
  const ::exchange::ServerMessage_Position* p = book_;
  // @@protoc_insertion_point(field_get:exchange.ServerMessage.book)
  return p != nullptr ? *p : *reinterpret_cast<const ::exchange::ServerMessage_Position*>(
      &::exchange::_ServerMessage_Position_default_instance_);
}
inline ::exchange::ServerMessage_Position* ServerMessage::release_book() {
  // @@protoc_insertion_point(field_release:exchange.ServerMessage.book)
  
  ::exchange::ServerMessage_Position* temp = book_;
  book_ = nullptr;
  return temp;
}
inline ::exchange::ServerMessage_Position* ServerMessage::mutable_book() {
  
  if (book_ == nullptr) {
    auto* p = CreateMaybeMessage<::exchange::ServerMessage_Position>(GetArenaNoVirtual());
    book_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exchange.ServerMessage.book)
  return book_;
}
inline void ServerMessage::set_allocated_book(::exchange::ServerMessage_Position* book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete book_;
  }
  if (book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, book, submessage_arena);
    }
    
  } else {
    
  }
  book_ = book;
  // @@protoc_insertion_point(field_set_allocated:exchange.ServerMessage.book)
}

// -------------------------------------------------------------------

// ClientMessage_Transaction

// .exchange.StockType symbol = 1;
inline void ClientMessage_Transaction::clear_symbol() {
  symbol_ = 0;
}
inline ::exchange::StockType ClientMessage_Transaction::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.Transaction.symbol)
  return static_cast< ::exchange::StockType >(symbol_);
}
inline void ClientMessage_Transaction::set_symbol(::exchange::StockType value) {
  
  symbol_ = value;
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.Transaction.symbol)
}

// int32 price = 2;
inline void ClientMessage_Transaction::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage_Transaction::price() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.Transaction.price)
  return price_;
}
inline void ClientMessage_Transaction::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.Transaction.price)
}

// int32 size = 3;
inline void ClientMessage_Transaction::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage_Transaction::size() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.Transaction.size)
  return size_;
}
inline void ClientMessage_Transaction::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.Transaction.size)
}

// .exchange.Dir dir = 4;
inline void ClientMessage_Transaction::clear_dir() {
  dir_ = 0;
}
inline ::exchange::Dir ClientMessage_Transaction::dir() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.Transaction.dir)
  return static_cast< ::exchange::Dir >(dir_);
}
inline void ClientMessage_Transaction::set_dir(::exchange::Dir value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.Transaction.dir)
}

// -------------------------------------------------------------------

// ClientMessage

// .exchange.ClientMessage.MessageType t = 1;
inline void ClientMessage::clear_t() {
  t_ = 0;
}
inline ::exchange::ClientMessage_MessageType ClientMessage::t() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.t)
  return static_cast< ::exchange::ClientMessage_MessageType >(t_);
}
inline void ClientMessage::set_t(::exchange::ClientMessage_MessageType value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.t)
}

// .exchange.ClientMessage.Transaction add_order = 2;
inline bool ClientMessage::has_add_order() const {
  return this != internal_default_instance() && add_order_ != nullptr;
}
inline void ClientMessage::clear_add_order() {
  if (GetArenaNoVirtual() == nullptr && add_order_ != nullptr) {
    delete add_order_;
  }
  add_order_ = nullptr;
}
inline const ::exchange::ClientMessage_Transaction& ClientMessage::add_order() const {
  const ::exchange::ClientMessage_Transaction* p = add_order_;
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.add_order)
  return p != nullptr ? *p : *reinterpret_cast<const ::exchange::ClientMessage_Transaction*>(
      &::exchange::_ClientMessage_Transaction_default_instance_);
}
inline ::exchange::ClientMessage_Transaction* ClientMessage::release_add_order() {
  // @@protoc_insertion_point(field_release:exchange.ClientMessage.add_order)
  
  ::exchange::ClientMessage_Transaction* temp = add_order_;
  add_order_ = nullptr;
  return temp;
}
inline ::exchange::ClientMessage_Transaction* ClientMessage::mutable_add_order() {
  
  if (add_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::exchange::ClientMessage_Transaction>(GetArenaNoVirtual());
    add_order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exchange.ClientMessage.add_order)
  return add_order_;
}
inline void ClientMessage::set_allocated_add_order(::exchange::ClientMessage_Transaction* add_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete add_order_;
  }
  if (add_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_order, submessage_arena);
    }
    
  } else {
    
  }
  add_order_ = add_order;
  // @@protoc_insertion_point(field_set_allocated:exchange.ClientMessage.add_order)
}

// string name = 3;
inline void ClientMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientMessage::name() const {
  // @@protoc_insertion_point(field_get:exchange.ClientMessage.name)
  return _internal_name();
}
inline void ClientMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:exchange.ClientMessage.name)
}
inline std::string* ClientMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:exchange.ClientMessage.name)
  return _internal_mutable_name();
}
inline const std::string& ClientMessage::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClientMessage::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientMessage::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exchange.ClientMessage.name)
}
inline void ClientMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exchange.ClientMessage.name)
}
inline void ClientMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exchange.ClientMessage.name)
}
inline std::string* ClientMessage::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientMessage::release_name() {
  // @@protoc_insertion_point(field_release:exchange.ClientMessage.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:exchange.ClientMessage.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::exchange::ServerMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::ServerMessage_MessageType>() {
  return ::exchange::ServerMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::exchange::ClientMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::ClientMessage_MessageType>() {
  return ::exchange::ClientMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::exchange::StockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::StockType>() {
  return ::exchange::StockType_descriptor();
}
template <> struct is_proto_enum< ::exchange::Dir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::Dir>() {
  return ::exchange::Dir_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
