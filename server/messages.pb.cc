// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Transaction_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceAndSize_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerMessage_Position_messages_2eproto;
namespace exchange {
class PriceAndSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceAndSize> _instance;
} _PriceAndSize_default_instance_;
class ServerMessage_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMessage_Position> _instance;
} _ServerMessage_Position_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMessage> _instance;
} _ServerMessage_default_instance_;
class ClientMessage_TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Transaction> _instance;
} _ClientMessage_Transaction_default_instance_;
class ClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage> _instance;
} _ClientMessage_default_instance_;
}  // namespace exchange
static void InitDefaultsscc_info_ClientMessage_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exchange::_ClientMessage_default_instance_;
    new (ptr) ::exchange::ClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exchange::ClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientMessage_messages_2eproto}, {
      &scc_info_ClientMessage_Transaction_messages_2eproto.base,}};

static void InitDefaultsscc_info_ClientMessage_Transaction_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exchange::_ClientMessage_Transaction_default_instance_;
    new (ptr) ::exchange::ClientMessage_Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exchange::ClientMessage_Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Transaction_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessage_Transaction_messages_2eproto}, {}};

static void InitDefaultsscc_info_PriceAndSize_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exchange::_PriceAndSize_default_instance_;
    new (ptr) ::exchange::PriceAndSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exchange::PriceAndSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceAndSize_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceAndSize_messages_2eproto}, {}};

static void InitDefaultsscc_info_ServerMessage_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exchange::_ServerMessage_default_instance_;
    new (ptr) ::exchange::ServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exchange::ServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerMessage_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerMessage_messages_2eproto}, {
      &scc_info_ServerMessage_Position_messages_2eproto.base,}};

static void InitDefaultsscc_info_ServerMessage_Position_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exchange::_ServerMessage_Position_default_instance_;
    new (ptr) ::exchange::ServerMessage_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exchange::ServerMessage_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerMessage_Position_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerMessage_Position_messages_2eproto}, {
      &scc_info_PriceAndSize_messages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::PriceAndSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::PriceAndSize, price_),
  PROTOBUF_FIELD_OFFSET(::exchange::PriceAndSize, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage_Position, symbol_),
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage_Position, buy_),
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage_Position, sell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage, t_),
  PROTOBUF_FIELD_OFFSET(::exchange::ServerMessage, book_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage_Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage_Transaction, symbol_),
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage_Transaction, price_),
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage_Transaction, size_),
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage_Transaction, dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage, t_),
  PROTOBUF_FIELD_OFFSET(::exchange::ClientMessage, add_order_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::exchange::PriceAndSize)},
  { 7, -1, sizeof(::exchange::ServerMessage_Position)},
  { 15, -1, sizeof(::exchange::ServerMessage)},
  { 22, -1, sizeof(::exchange::ClientMessage_Transaction)},
  { 31, -1, sizeof(::exchange::ClientMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_PriceAndSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_ServerMessage_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_ServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_ClientMessage_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_ClientMessage_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\010exchange\"+\n\014PriceAndSi"
  "ze\022\r\n\005price\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\"\247\002\n\rServ"
  "erMessage\022.\n\001t\030\001 \001(\0162#.exchange.ServerMe"
  "ssage.MessageType\022.\n\004book\030\002 \001(\0132 .exchan"
  "ge.ServerMessage.Position\032z\n\010Position\022#\n"
  "\006symbol\030\001 \001(\0162\023.exchange.StockType\022#\n\003bu"
  "y\030\002 \003(\0132\026.exchange.PriceAndSize\022$\n\004sell\030"
  "\003 \003(\0132\026.exchange.PriceAndSize\":\n\013Message"
  "Type\022\t\n\005HELLO\020\000\022\010\n\004BOOK\020\001\022\010\n\004FILL\020\002\022\014\n\010R"
  "EJECTED\020\003\"\215\002\n\rClientMessage\022.\n\001t\030\001 \001(\0162#"
  ".exchange.ClientMessage.MessageType\0226\n\ta"
  "dd_order\030\002 \001(\0132#.exchange.ClientMessage."
  "Transaction\032k\n\013Transaction\022#\n\006symbol\030\001 \001"
  "(\0162\023.exchange.StockType\022\r\n\005price\030\002 \001(\005\022\014"
  "\n\004size\030\003 \001(\005\022\032\n\003dir\030\004 \001(\0162\r.exchange.Dir"
  "\"\'\n\013MessageType\022\t\n\005HELLO\020\000\022\r\n\tADD_ORDER\020"
  "\001**\n\tStockType\022\010\n\004BOND\020\000\022\t\n\005VALBZ\020\001\022\010\n\004V"
  "ALE\020\002*\030\n\003Dir\022\007\n\003BUY\020\000\022\010\n\004SELL\020\0012M\n\010Excha"
  "nge\022A\n\007Message\022\027.exchange.ClientMessage\032"
  "\027.exchange.ServerMessage\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2eproto_sccs[5] = {
  &scc_info_ClientMessage_messages_2eproto.base,
  &scc_info_ClientMessage_Transaction_messages_2eproto.base,
  &scc_info_PriceAndSize_messages_2eproto.base,
  &scc_info_ServerMessage_messages_2eproto.base,
  &scc_info_ServerMessage_Position_messages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
static bool descriptor_table_messages_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  &descriptor_table_messages_2eproto_initialized, descriptor_table_protodef_messages_2eproto, "messages.proto", 798,
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_sccs, descriptor_table_messages_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 5, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2eproto), true);
namespace exchange {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool ServerMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerMessage_MessageType ServerMessage::HELLO;
constexpr ServerMessage_MessageType ServerMessage::BOOK;
constexpr ServerMessage_MessageType ServerMessage::FILL;
constexpr ServerMessage_MessageType ServerMessage::REJECTED;
constexpr ServerMessage_MessageType ServerMessage::MessageType_MIN;
constexpr ServerMessage_MessageType ServerMessage::MessageType_MAX;
constexpr int ServerMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool ClientMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessage_MessageType ClientMessage::HELLO;
constexpr ClientMessage_MessageType ClientMessage::ADD_ORDER;
constexpr ClientMessage_MessageType ClientMessage::MessageType_MIN;
constexpr ClientMessage_MessageType ClientMessage::MessageType_MAX;
constexpr int ClientMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool StockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dir_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[3];
}
bool Dir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PriceAndSize::InitAsDefaultInstance() {
}
class PriceAndSize::_Internal {
 public:
};

PriceAndSize::PriceAndSize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exchange.PriceAndSize)
}
PriceAndSize::PriceAndSize(const PriceAndSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&price_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:exchange.PriceAndSize)
}

void PriceAndSize::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
}

PriceAndSize::~PriceAndSize() {
  // @@protoc_insertion_point(destructor:exchange.PriceAndSize)
  SharedDtor();
}

void PriceAndSize::SharedDtor() {
}

void PriceAndSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceAndSize& PriceAndSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceAndSize_messages_2eproto.base);
  return *internal_default_instance();
}


void PriceAndSize::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.PriceAndSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PriceAndSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PriceAndSize::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:exchange.PriceAndSize)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 price = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exchange.PriceAndSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exchange.PriceAndSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* PriceAndSize::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.PriceAndSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 price = 1;
  if (this->price() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->price(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.PriceAndSize)
  return target;
}

size_t PriceAndSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.PriceAndSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceAndSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exchange.PriceAndSize)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceAndSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceAndSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exchange.PriceAndSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exchange.PriceAndSize)
    MergeFrom(*source);
  }
}

void PriceAndSize::MergeFrom(const PriceAndSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.PriceAndSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void PriceAndSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exchange.PriceAndSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceAndSize::CopyFrom(const PriceAndSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.PriceAndSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceAndSize::IsInitialized() const {
  return true;
}

void PriceAndSize::InternalSwap(PriceAndSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(price_, other->price_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceAndSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerMessage_Position::InitAsDefaultInstance() {
}
class ServerMessage_Position::_Internal {
 public:
};

ServerMessage_Position::ServerMessage_Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exchange.ServerMessage.Position)
}
ServerMessage_Position::ServerMessage_Position(const ServerMessage_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_ = from.symbol_;
  // @@protoc_insertion_point(copy_constructor:exchange.ServerMessage.Position)
}

void ServerMessage_Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerMessage_Position_messages_2eproto.base);
  symbol_ = 0;
}

ServerMessage_Position::~ServerMessage_Position() {
  // @@protoc_insertion_point(destructor:exchange.ServerMessage.Position)
  SharedDtor();
}

void ServerMessage_Position::SharedDtor() {
}

void ServerMessage_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessage_Position& ServerMessage_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMessage_Position_messages_2eproto.base);
  return *internal_default_instance();
}


void ServerMessage_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.ServerMessage.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  symbol_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerMessage_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .exchange.StockType symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_symbol(static_cast<::exchange::StockType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .exchange.PriceAndSize buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .exchange.PriceAndSize sell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerMessage_Position::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:exchange.ServerMessage.Position)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .exchange.StockType symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_symbol(static_cast< ::exchange::StockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exchange.PriceAndSize buy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exchange.PriceAndSize sell = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exchange.ServerMessage.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exchange.ServerMessage.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessage_Position::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.ServerMessage.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .exchange.StockType symbol = 1;
  if (this->symbol() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->symbol(), target);
  }

  // repeated .exchange.PriceAndSize buy = 2;
  for (auto it = this->buy_.pointer_begin(),
            end = this->buy_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  // repeated .exchange.PriceAndSize sell = 3;
  for (auto it = this->sell_.pointer_begin(),
            end = this->sell_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.ServerMessage.Position)
  return target;
}

size_t ServerMessage_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.ServerMessage.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exchange.PriceAndSize buy = 2;
  total_size += 1UL * this->buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .exchange.PriceAndSize sell = 3;
  total_size += 1UL * this->sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .exchange.StockType symbol = 1;
  if (this->symbol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->symbol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exchange.ServerMessage.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMessage_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exchange.ServerMessage.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exchange.ServerMessage.Position)
    MergeFrom(*source);
  }
}

void ServerMessage_Position::MergeFrom(const ServerMessage_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.ServerMessage.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.symbol() != 0) {
    set_symbol(from.symbol());
  }
}

void ServerMessage_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exchange.ServerMessage.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage_Position::CopyFrom(const ServerMessage_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.ServerMessage.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_Position::IsInitialized() const {
  return true;
}

void ServerMessage_Position::InternalSwap(ServerMessage_Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
  ::exchange::_ServerMessage_default_instance_._instance.get_mutable()->book_ = const_cast< ::exchange::ServerMessage_Position*>(
      ::exchange::ServerMessage_Position::internal_default_instance());
}
class ServerMessage::_Internal {
 public:
  static const ::exchange::ServerMessage_Position& book(const ServerMessage* msg);
};

const ::exchange::ServerMessage_Position&
ServerMessage::_Internal::book(const ServerMessage* msg) {
  return *msg->book_;
}
ServerMessage::ServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exchange.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_book()) {
    book_ = new ::exchange::ServerMessage_Position(*from.book_);
  } else {
    book_ = nullptr;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:exchange.ServerMessage)
}

void ServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerMessage_messages_2eproto.base);
  ::memset(&book_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&book_)) + sizeof(t_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:exchange.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete book_;
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessage& ServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMessage_messages_2eproto.base);
  return *internal_default_instance();
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && book_ != nullptr) {
    delete book_;
  }
  book_ = nullptr;
  t_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .exchange.ServerMessage.MessageType t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_t(static_cast<::exchange::ServerMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .exchange.ServerMessage.Position book = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_book(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:exchange.ServerMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .exchange.ServerMessage.MessageType t = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_t(static_cast< ::exchange::ServerMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .exchange.ServerMessage.Position book = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_book()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exchange.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exchange.ServerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .exchange.ServerMessage.MessageType t = 1;
  if (this->t() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->t(), target);
  }

  // .exchange.ServerMessage.Position book = 2;
  if (this->has_book()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::book(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.ServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .exchange.ServerMessage.Position book = 2;
  if (this->has_book()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *book_);
  }

  // .exchange.ServerMessage.MessageType t = 1;
  if (this->t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->t());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exchange.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exchange.ServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exchange.ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_book()) {
    mutable_book()->::exchange::ServerMessage_Position::MergeFrom(from.book());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void ServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exchange.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(book_, other->book_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage_Transaction::InitAsDefaultInstance() {
}
class ClientMessage_Transaction::_Internal {
 public:
};

ClientMessage_Transaction::ClientMessage_Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exchange.ClientMessage.Transaction)
}
ClientMessage_Transaction::ClientMessage_Transaction(const ClientMessage_Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbol_, &from.symbol_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&symbol_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:exchange.ClientMessage.Transaction)
}

void ClientMessage_Transaction::SharedCtor() {
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(dir_));
}

ClientMessage_Transaction::~ClientMessage_Transaction() {
  // @@protoc_insertion_point(destructor:exchange.ClientMessage.Transaction)
  SharedDtor();
}

void ClientMessage_Transaction::SharedDtor() {
}

void ClientMessage_Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Transaction& ClientMessage_Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Transaction_messages_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.ClientMessage.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(dir_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientMessage_Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .exchange.StockType symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_symbol(static_cast<::exchange::StockType>(val));
        } else goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .exchange.Dir dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dir(static_cast<::exchange::Dir>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientMessage_Transaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:exchange.ClientMessage.Transaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .exchange.StockType symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_symbol(static_cast< ::exchange::StockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .exchange.Dir dir = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dir(static_cast< ::exchange::Dir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exchange.ClientMessage.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exchange.ClientMessage.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Transaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.ClientMessage.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .exchange.StockType symbol = 1;
  if (this->symbol() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->symbol(), target);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // .exchange.Dir dir = 4;
  if (this->dir() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.ClientMessage.Transaction)
  return target;
}

size_t ClientMessage_Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.ClientMessage.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .exchange.StockType symbol = 1;
  if (this->symbol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->symbol());
  }

  // int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // .exchange.Dir dir = 4;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exchange.ClientMessage.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exchange.ClientMessage.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exchange.ClientMessage.Transaction)
    MergeFrom(*source);
  }
}

void ClientMessage_Transaction::MergeFrom(const ClientMessage_Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.ClientMessage.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol() != 0) {
    set_symbol(from.symbol());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
}

void ClientMessage_Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exchange.ClientMessage.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Transaction::CopyFrom(const ClientMessage_Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.ClientMessage.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Transaction::IsInitialized() const {
  return true;
}

void ClientMessage_Transaction::InternalSwap(ClientMessage_Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::exchange::_ClientMessage_default_instance_._instance.get_mutable()->add_order_ = const_cast< ::exchange::ClientMessage_Transaction*>(
      ::exchange::ClientMessage_Transaction::internal_default_instance());
}
class ClientMessage::_Internal {
 public:
  static const ::exchange::ClientMessage_Transaction& add_order(const ClientMessage* msg);
};

const ::exchange::ClientMessage_Transaction&
ClientMessage::_Internal::add_order(const ClientMessage* msg) {
  return *msg->add_order_;
}
ClientMessage::ClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exchange.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_add_order()) {
    add_order_ = new ::exchange::ClientMessage_Transaction(*from.add_order_);
  } else {
    add_order_ = nullptr;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:exchange.ClientMessage)
}

void ClientMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_messages_2eproto.base);
  ::memset(&add_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&add_order_)) + sizeof(t_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:exchange.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != internal_default_instance()) delete add_order_;
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage& ClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_messages_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && add_order_ != nullptr) {
    delete add_order_;
  }
  add_order_ = nullptr;
  t_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .exchange.ClientMessage.MessageType t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_t(static_cast<::exchange::ClientMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .exchange.ClientMessage.Transaction add_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_add_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:exchange.ClientMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .exchange.ClientMessage.MessageType t = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_t(static_cast< ::exchange::ClientMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .exchange.ClientMessage.Transaction add_order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_add_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exchange.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exchange.ClientMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .exchange.ClientMessage.MessageType t = 1;
  if (this->t() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->t(), target);
  }

  // .exchange.ClientMessage.Transaction add_order = 2;
  if (this->has_add_order()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::add_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .exchange.ClientMessage.Transaction add_order = 2;
  if (this->has_add_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_order_);
  }

  // .exchange.ClientMessage.MessageType t = 1;
  if (this->t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->t());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exchange.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exchange.ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exchange.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_add_order()) {
    mutable_add_order()->::exchange::ClientMessage_Transaction::MergeFrom(from.add_order());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exchange.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(add_order_, other->add_order_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace exchange
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::exchange::PriceAndSize* Arena::CreateMaybeMessage< ::exchange::PriceAndSize >(Arena* arena) {
  return Arena::CreateInternal< ::exchange::PriceAndSize >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::ServerMessage_Position* Arena::CreateMaybeMessage< ::exchange::ServerMessage_Position >(Arena* arena) {
  return Arena::CreateInternal< ::exchange::ServerMessage_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::ServerMessage* Arena::CreateMaybeMessage< ::exchange::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::exchange::ServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::ClientMessage_Transaction* Arena::CreateMaybeMessage< ::exchange::ClientMessage_Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::exchange::ClientMessage_Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::ClientMessage* Arena::CreateMaybeMessage< ::exchange::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::exchange::ClientMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
