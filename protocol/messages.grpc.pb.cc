// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace exchange {

static const char* Exchange_method_names[] = {
  "/exchange.Exchange/Message",
};

std::unique_ptr< Exchange::Stub> Exchange::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Exchange::Stub> stub(new Exchange::Stub(channel));
  return stub;
}

Exchange::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Message_(Exchange_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::exchange::ClientMessage, ::exchange::ServerMessage>* Exchange::Stub::MessageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::exchange::ClientMessage, ::exchange::ServerMessage>::Create(channel_.get(), rpcmethod_Message_, context);
}

void Exchange::Stub::experimental_async::Message(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::exchange::ClientMessage,::exchange::ServerMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::exchange::ClientMessage,::exchange::ServerMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Message_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::exchange::ClientMessage, ::exchange::ServerMessage>* Exchange::Stub::AsyncMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::exchange::ClientMessage, ::exchange::ServerMessage>::Create(channel_.get(), cq, rpcmethod_Message_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::exchange::ClientMessage, ::exchange::ServerMessage>* Exchange::Stub::PrepareAsyncMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::exchange::ClientMessage, ::exchange::ServerMessage>::Create(channel_.get(), cq, rpcmethod_Message_, context, false, nullptr);
}

Exchange::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Exchange_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Exchange::Service, ::exchange::ClientMessage, ::exchange::ServerMessage>(
          std::mem_fn(&Exchange::Service::Message), this)));
}

Exchange::Service::~Service() {
}

::grpc::Status Exchange::Service::Message(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::exchange::ServerMessage, ::exchange::ClientMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace exchange

